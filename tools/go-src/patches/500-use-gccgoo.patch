--- a/src/cmd/go/build.go
+++ b/src/cmd/go/build.go
@@ -1796,9 +1796,9 @@
 	if !extld {
 		var compiler []string
 		if cxx {
-			compiler = envList("CXX", defaultCXX)
+//			compiler = envList("CXX", defaultCXX)
 		} else {
-			compiler = envList("CC", defaultCC)
+//			compiler = envList("CC", defaultCC)
 		}
 		ldflags = append(ldflags, "-extld="+compiler[0])
 		if len(compiler) > 1 {
@@ -1975,7 +1975,7 @@
 	if pkgpath := gccgoCleanPkgpath(p); pkgpath != "" {
 		defs = append(defs, `-D`, `GOPKGPATH="`+pkgpath+`"`)
 	}
-	return b.run(p.Dir, p.ImportPath, nil, envList("CC", defaultCC), "-Wall", "-g",
+	return b.run(p.Dir, p.ImportPath, nil, []string{}, "-Wall", "-g",
 		"-I", objdir, "-I", inc, "-o", ofile, defs, "-c", cfile)
 }
 
@@ -2065,13 +2065,13 @@
 // gccCmd returns a gcc command line prefix
 // defaultCC is defined in zdefaultcc.go, written by cmd/dist.
 func (b *builder) gccCmd(objdir string) []string {
-	return b.ccompilerCmd("CC", defaultCC, objdir)
+	return []string{}
 }
 
 // gxxCmd returns a g++ command line prefix
 // defaultCXX is defined in zdefaultcc.go, written by cmd/dist.
 func (b *builder) gxxCmd(objdir string) []string {
-	return b.ccompilerCmd("CXX", defaultCXX, objdir)
+	return []string{}
 }
 
 // ccompilerCmd returns a command line prefix for the given environment
@@ -2125,11 +2125,11 @@
 func (b *builder) gccArchArgs() []string {
 	switch archChar {
 	case "8":
-		return []string{"-m32"}
+		return []string{}
 	case "6":
-		return []string{"-m64"}
+		return []string{}
 	case "5":
-		return []string{"-marm"} // not thumb
+		return []string{} // not thumb
 	}
 	return nil
 }
